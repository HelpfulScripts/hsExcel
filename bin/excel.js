"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const XLSX = require('xlsx');
class File {
    constructor(name, options) {
        this.workbook = XLSX.readFile(name, options);
    }
    getSheetNames() {
        const names = [];
        for (let s in this.workbook.Sheets) {
            names.push(s);
        }
        return names;
    }
    getTableColumns(sheetName, startCol = 'A', row = 1) {
        const sheet = this.workbook.Sheets[sheetName];
        return this.constructCol(sheetName, row, this.getConsecutiveColumnNames(sheet, row, startCol));
    }
    getRowsForTable(table, maxRows = 0) {
        if (!table.sheetName) {
            throw new Error('illegal table parameter in getRowsForTable');
        }
        const sheet = this.workbook.Sheets[table.sheetName];
        const result = [];
        let row = 0;
        while (true) {
            let newRow = this.getRow(sheet, row + table.headerRow + 1, table.colIndex);
            let filledCells = 0;
            for (let c in newRow) {
                if (newRow[c]) {
                    filledCells++;
                }
            }
            row++;
            if (filledCells > 0) {
                result.push(newRow);
            }
            else if (maxRows <= 0) {
                break;
            }
            if (maxRows > 0 && row >= maxRows) {
                break;
            }
        }
        return result;
    }
    *nextExcelColIndex(startCol = 'A') {
        function nextChar(c) { return String.fromCharCode(c.charCodeAt(0) + 1); }
        let c = startCol;
        while (true) {
            yield c;
            if (c.length === 1) {
                c = (c < 'Z') ? nextChar(c[0]) : 'AA';
            }
            else {
                var ch = nextChar(c[1]);
                c = (ch > 'Z') ? nextChar(c[0]) + 'A' : c[0] + ch;
            }
        }
    }
    getTable(sheetID, startCol = 'A', startRow = 1) {
        const sheetName = (typeof sheetID === 'string') ? sheetID : this.getSheetNames()[sheetID];
        const columns = this.getTableColumns(sheetName, startCol, startRow);
        const table = this.getRowsForTable(columns);
        return { columns, table };
    }
    getCellValue(sheet, col, row) {
        if (typeof sheet === 'string') {
            sheet = this.workbook.Sheets[sheet];
        }
        let c;
        if (sheet[col + row] && sheet[col + row].v !== '') {
            c = sheet[col + row];
            let val = c.w !== undefined ? c.w : c.v;
            if (c) {
                switch (c.t) {
                    case 's': return val.replace(/,/g, ';').replace(/[\n\r]+/g, ' ').trim();
                    case 'n':
                    default: return c.w.replace(/,/g, '');
                }
            }
        }
        return '';
    }
    *getCellValues(sheet, row, colIterator) {
        for (let col of colIterator) {
            yield this.getCellValue(sheet, col, row);
        }
    }
    *getConsecutiveColumnNames(sheet, row, startCol) {
        for (let col of this.nextExcelColIndex(startCol)) {
            if (!this.getCellValue(sheet, col, row)) {
                break;
            }
            yield { col: col, name: this.getCellValue(sheet, col, row) };
        }
    }
    getRow(sheet, row, columns) {
        const result = [...this.getCellValues(sheet, row, columns)];
        return result;
    }
    constructCol(sheetName, row, it) {
        const result = {
            names: [],
            sheetName: sheetName,
            headerRow: row,
            colIndex: []
        };
        for (let col of it) {
            result.names.push(col.name);
            result.colIndex.push(col.col);
        }
        return result;
    }
}
exports.File = File;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhjZWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvZXhjZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFRQSxNQUFNLElBQUksR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7QUF3RDdCO0lBR0ksWUFBWSxJQUFXLEVBQUUsT0FBWTtRQUNqQyxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ2pELENBQUM7SUFNRyxhQUFhO1FBQ25CLE1BQU0sS0FBSyxHQUFZLEVBQUUsQ0FBQztRQUMxQixLQUFLLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFO1lBQ25DLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDZDtRQUNELE9BQU8sS0FBSyxDQUFDO0lBQ2QsQ0FBQztJQVNNLGVBQWUsQ0FBQyxTQUFnQixFQUFFLFFBQVEsR0FBQyxHQUFHLEVBQUUsR0FBRyxHQUFDLENBQUM7UUFDckQsTUFBTSxLQUFLLEdBQWEsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDOUQsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLHlCQUF5QixDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQztJQUNoRyxDQUFDO0lBU00sZUFBZSxDQUFDLEtBQWlCLEVBQUUsT0FBTyxHQUFDLENBQUM7UUFDbEQsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUU7WUFBRSxNQUFNLElBQUksS0FBSyxDQUFDLDRDQUE0QyxDQUFDLENBQUM7U0FBRTtRQUN4RixNQUFNLEtBQUssR0FBYSxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDOUQsTUFBTSxNQUFNLEdBQWEsRUFBRSxDQUFDO1FBQzVCLElBQUksR0FBRyxHQUFDLENBQUMsQ0FBQztRQUNWLE9BQU8sSUFBSSxFQUFFO1lBQ1osSUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsR0FBRyxHQUFDLEtBQUssQ0FBQyxTQUFTLEdBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUN2RSxJQUFJLFdBQVcsR0FBRyxDQUFDLENBQUM7WUFDcEIsS0FBSyxJQUFJLENBQUMsSUFBSSxNQUFNLEVBQUU7Z0JBQUUsSUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUU7b0JBQUUsV0FBVyxFQUFFLENBQUM7aUJBQUU7YUFBQztZQUNqRCxHQUFHLEVBQUUsQ0FBQztZQUVOLElBQUksV0FBVyxHQUFHLENBQUMsRUFBRTtnQkFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2FBQUU7aUJBRXhDLElBQUksT0FBTyxJQUFFLENBQUMsRUFBRTtnQkFBRyxNQUFNO2FBQUU7WUFFekMsSUFBSSxPQUFPLEdBQUMsQ0FBQyxJQUFJLEdBQUcsSUFBRSxPQUFPLEVBQUU7Z0JBQUUsTUFBTTthQUFFO1NBQ3pDO1FBQ0QsT0FBTyxNQUFNLENBQUM7SUFDZixDQUFDO0lBZVEsQ0FBRSxpQkFBaUIsQ0FBQyxRQUFRLEdBQUMsR0FBRztRQUNsQyxrQkFBa0IsQ0FBUSxJQUFXLE9BQU8sTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUV2RixJQUFJLENBQUMsR0FBRyxRQUFRLENBQUM7UUFDakIsT0FBTyxJQUFJLEVBQUU7WUFDVCxNQUFNLENBQUMsQ0FBQztZQUNSLElBQUksQ0FBQyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7Z0JBQ2hCLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7YUFDeEM7aUJBQU07Z0JBQ0gsSUFBSSxFQUFFLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUN4QixDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLENBQUEsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7YUFDbEQ7U0FDSjtJQUNMLENBQUM7SUFXRyxRQUFRLENBQUMsT0FBcUIsRUFBRSxRQUFRLEdBQUMsR0FBRyxFQUFFLFFBQVEsR0FBQyxDQUFDO1FBQ3hELE1BQU0sU0FBUyxHQUFHLENBQUMsT0FBTyxPQUFPLEtBQUssUUFBUSxDQUFDLENBQUEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQy9GLE1BQU0sT0FBTyxHQUFlLElBQUksQ0FBQyxlQUFlLENBQUMsU0FBUyxFQUFFLFFBQVEsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUNoRixNQUFNLEtBQUssR0FBaUIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMxRCxPQUFPLEVBQUMsT0FBTyxFQUFFLEtBQUssRUFBQyxDQUFDO0lBQ3RCLENBQUM7SUFTRyxZQUFZLENBQUMsS0FBc0IsRUFBRSxHQUFVLEVBQUUsR0FBVTtRQUNqRSxJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsRUFBRTtZQUFFLEtBQUssR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUFFO1FBQ2pFLElBQUksQ0FBWSxDQUFDO1FBQ3ZCLElBQUksS0FBSyxDQUFDLEdBQUcsR0FBQyxHQUFHLENBQUMsSUFBSSxLQUFLLENBQUMsR0FBRyxHQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBRyxFQUFFLEVBQUU7WUFDbkMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxHQUFHLEdBQUMsR0FBRyxDQUFDLENBQUM7WUFDbkIsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBRyxTQUFTLENBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDOUMsSUFBSSxDQUFDLEVBQUU7Z0JBQUUsUUFBTyxDQUFDLENBQUMsQ0FBQyxFQUFFO29CQUNwQixLQUFLLEdBQUcsQ0FBQyxDQUFDLE9BQWdCLEdBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFVLEVBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7b0JBQ2hGLEtBQUssR0FBRyxDQUFDO29CQUNULE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFDLEVBQUUsQ0FBQyxDQUFDO2lCQUNyQzthQUFDO1NBQ0Y7UUFDRCxPQUFPLEVBQUUsQ0FBQztJQUNYLENBQUM7SUFXTSxDQUFFLGFBQWEsQ0FBQyxLQUFlLEVBQUUsR0FBVSxFQUFFLFdBQW9CO1FBQ3ZFLEtBQUssSUFBSSxHQUFHLElBQUksV0FBVyxFQUFFO1lBQzVCLE1BQU0sSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1NBQ3pDO0lBQ0YsQ0FBQztJQVVNLENBQUUseUJBQXlCLENBQUMsS0FBZSxFQUFFLEdBQVUsRUFBRSxRQUFlO1FBQzlFLEtBQUssSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQ2pELElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLEVBQUU7Z0JBQUUsTUFBTTthQUFFO1lBQ25ELE1BQU0sRUFBQyxHQUFHLEVBQUMsR0FBRyxFQUFFLElBQUksRUFBQyxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLEVBQUMsQ0FBQztTQUN6RDtJQUNGLENBQUM7SUFTTyxNQUFNLENBQUMsS0FBZSxFQUFFLEdBQVUsRUFBRSxPQUFnQjtRQUMzRCxNQUFNLE1BQU0sR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFDNUQsT0FBTyxNQUFNLENBQUM7SUFDZixDQUFDO0lBU08sWUFBWSxDQUFDLFNBQWdCLEVBQUUsR0FBVSxFQUFFLEVBQU07UUFDeEQsTUFBTSxNQUFNLEdBQWU7WUFDMUIsS0FBSyxFQUFDLEVBQUU7WUFDUixTQUFTLEVBQUUsU0FBUztZQUNwQixTQUFTLEVBQUUsR0FBRztZQUNkLFFBQVEsRUFBYSxFQUFFO1NBQ3ZCLENBQUM7UUFDRixLQUFLLElBQUksR0FBRyxJQUFJLEVBQUUsRUFBRTtZQUNuQixNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDNUIsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQzlCO1FBQ0QsT0FBTyxNQUFNLENBQUM7SUFDZixDQUFDO0NBRUQ7QUEzTEQsb0JBMkxDIn0=